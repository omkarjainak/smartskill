---
import Layout from "../layouts/Layout.astro";
import FileUpload from "../components/FileUpload.astro";
export const prerender = false;
---

<Layout title="Dashboard | SmartSkills">
	<div class="flex pt-16">
		<!-- Sidebar -->
		<aside
			class="bg-white dark:bg-gray-800 w-64 fixed h-screen shadow-sm border-r border-gray-100 dark:border-gray-700 transition-colors duration-200 overflow-y-scroll pb-40"
		>
			<div class="p-6">
				<h2
					class="text-sm mb-6 font-semibold text-gray-700 dark:text-gray-400"
				>
					Job Profiles
				</h2>
				<ul id="profileList" class="space-y-1"></ul>
				<div class="fixed bottom-4 z-10 bg-white dark:bg-gray-800">
					<FileUpload />
					<a
						class="inline-block mt-2 border-b border-dashed text-gray-600 dark:text-gray-400"
						href="/template.xlsx"
						download>Download template</a
					>
				</div>
			</div>
		</aside>

		<!-- Main Content -->
		<main class="ml-64 p-6 flex-1">
			<div
				id="skillsContainer"
				class="bg-white dark:bg-gray-800 rounded-lg shadow-sm p-6 transition-colors duration-200"
			>
			</div>
			<div
				id="recommendedSkillsContainer"
				class="bg-white dark:bg-gray-800 rounded-lg shadow-sm p-6 transition-colors duration-200 mt-8"
				style="display: none;"
			>
			</div>

			<div
				id="apiModal"
				class="modal hidden fixed inset-0 bg-black/50 z-50 flex items-center justify-center p-4"
			>
				<div
					class="modal-content bg-white dark:bg-gray-800 text-gray-700 dark:text-gray-400 rounded-xl shadow-xl w-full max-w-7xl max-h-[90vh] overflow-hidden"
				>
					<div
						class="modal-header flex items-center justify-between p-4 border-b border-gray-200"
					>
						<h2 id="modal-title" class="text-xl font-semibold">
							Search Results
						</h2>
						<button
							id="getRecommendationsBtn"
							class="ml-auto mr-2 px-4 py-2 bg-green-600 hover:bg-green-700 text-white rounded-lg shadow-sm hidden"
							>Get Recommendations</button
						>
						<button
							id="close-modal-btn"
							class="focus:outline-none cursor-pointer"
						>
							<svg
								class="w-6 h-6"
								fill="none"
								stroke="currentColor"
								viewBox="0 0 24 24"
							>
								<path
									stroke-linecap="round"
									stroke-linejoin="round"
									stroke-width="2"
									d="M6 18L18 6M6 6l12 12"></path>
							</svg>
						</button>
					</div>

					<div class="modal-body flex h-[calc(90vh-4rem)]">
						<!-- Left sidebar with search results -->
						<div
							class="w-[30%] border-r border-gray-200 dark:border-gray-700 overflow-y-auto p-4"
						>
							<div id="searchResults" class="space-y-4">
								<!-- Search results will be populated here -->
							</div>
						</div>

						<!-- Right content area -->
						<div class="w-[70%] overflow-y-auto p-4">
							<div
								id="loadingSpinner"
								class="loading-spinner hidden flex items-center justify-center p-4"
							>
								<div
									class="animate-spin rounded-full h-8 w-8 border-b-2 border-violet-600"
								>
								</div>
							</div>

							<div id="contentArea" class="space-y-4">
								<!-- Extraction Accordion -->
								<div
									class="border border-gray-200 dark:border-gray-700 rounded-lg"
								>
									<button
										id="extractionHeader"
										class="w-full flex justify-between items-center p-4 bg-gray-50 dark:bg-gray-900 rounded-t-lg"
									>
										<span class="font-semibold"
											>Extracted Content</span
										>
										<div class="flex items-center gap-2">
											<div
												id="extractionSpinner"
												class="hidden animate-spin rounded-full h-5 w-5 border-b-2 border-violet-600"
											>
											</div>
											<svg
												class="w-5 h-5 transform transition-transform duration-200"
												fill="none"
												stroke="currentColor"
												viewBox="0 0 24 24"
											>
												<path
													stroke-linecap="round"
													stroke-linejoin="round"
													stroke-width="2"
													d="M19 9l-7 7-7-7"></path>
											</svg>
										</div>
									</button>
									<div
										id="extractionContent"
										class="p-4 border-t border-gray-200 dark:border-gray-700"
									>
										<div
											id="extractionProgress"
											class="hidden space-y-2 mb-4 font-mono text-sm text-gray-600 dark:text-gray-400"
										>
										</div>
										<div
											id="extractionResult"
											class="prose dark:prose-invert max-w-none"
										>
										</div>
									</div>
								</div>

								<!-- Summary Accordion -->
								<div
									class="border border-gray-200 dark:border-gray-700 rounded-lg"
								>
									<button
										id="summaryHeader"
										class="w-full flex justify-between items-center p-4 bg-gray-50 dark:bg-gray-900 rounded-t-lg"
									>
										<span class="font-semibold"
											>AI Summary</span
										>
										<svg
											class="w-5 h-5 transform transition-transform duration-200"
											fill="none"
											stroke="currentColor"
											viewBox="0 0 24 24"
										>
											<path
												stroke-linecap="round"
												stroke-linejoin="round"
												stroke-width="2"
												d="M19 9l-7 7-7-7"></path>
										</svg>
									</button>
									<div
										id="summaryContent"
										class="p-4 border-t border-gray-200 dark:border-gray-700"
									>
										<div
											id="summarySpinner"
											class="hidden flex justify-center p-4"
										>
											<div
												class="animate-spin rounded-full h-6 w-6 border-b-2 border-violet-600"
											>
											</div>
										</div>
										<div
											id="summaryResult"
											class="prose dark:prose-invert max-w-none"
										>
										</div>
									</div>
								</div>
							</div>
						</div>
					</div>
				</div>
			</div>
		</main>
	</div>
</Layout>

<script lang="js">
	let jobProfiles = null;
	let activeProfileId = null;
	let recommendedSkills = [];

	// Add cache and extraction tracking
	// Cache now stores { content, summary }
	const articleCache = new Map();
	const inProgressExtractions = new Set();

	const modal = document.getElementById("apiModal");

	const closeBtn = document.querySelector("#close-modal-btn");
	const apiResult = document.getElementById("apiResult");
	const loadingSpinner = document.getElementById("loadingSpinner");
	const modalTitle = document.getElementById("modal-title");

	function openModal() {
		if (!modal) return;
		const profile = jobProfiles.find((p) => p.id === activeProfileId);
		modal.classList.remove("hidden");
		modal.classList.add("!flex");
		document.body.style.overflow = "hidden";
		modalTitle.textContent = `${profile.JobProfile} Analysis`;
		searchArticles(profile.jobProfile);
	}

	function closeModal() {
		if (!modal) return;
		modal.classList.add("hidden");
		modal.classList.remove("!flex");
		document.body.style.overflow = "";
		if (apiResult) {
			apiResult.textContent = "";
		}
		// Clear cache on close
		articleCache.clear();
	}

	function renderProfiles() {
		const profileList = document.getElementById("profileList");
		profileList.innerHTML = jobProfiles
			.map(
				(profile) => `
		<li>
		  <a
			href="#"
			data-profile-id="${profile.id}"
			class="block px-4 py-2 rounded-lg transition-colors ${
				activeProfileId === profile.id
					? "bg-gray-100 dark:bg-gray-700"
					: "hover:bg-gray-100 dark:hover:bg-gray-700 text-gray-700 dark:text-gray-300"
			}"
		  >
			${profile.JobProfile}
		  </a>
		</li>
	  `,
			)
			.join("");

		// Add click handlers
		profileList.querySelectorAll("a").forEach((link) => {
			link.addEventListener("click", (e) => {
				e.preventDefault();
				const profileId = Number(e.target.dataset.profileId);
				showProfile(profileId);
			});
		});
	}

	function renderSkillsTable(profile) {
		const skillsContainer = document.getElementById("skillsContainer");
		skillsContainer.innerHTML = `
		<div class="flex justify-between items-center"> 
			
			<h1 class="text-2xl font-semibold text-gray-800 dark:text-gray-200">
			  ${profile.JobProfile} Skills
			</h1> 
			<button id="ai-btn" onclick="openModal()" class="px-4 py-2 bg-violet-600 hover:bg-violet-700 dark:bg-violet-500 dark:hover:bg-violet-600 text-white rounded-lg cursor-pointer transition-colors duration-200 shadow-sm"> 
				Run AI Workflow 
			</button>
		</div>
		<div class="bg-white dark:bg-gray-800 rounded-lg mb-8">
		  <table class="min-w-lg">
			<thead>
			  <tr class="border-b border-gray-200 dark:border-gray-700">
				<th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">
				  Skill
				</th>
				<th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">
				  Status
				</th>
			  </tr>
			</thead>
			<tbody>
			  ${profile.JobProfileSkills.map(
					(skill) => `
				<tr class="border-b border-gray-100 dark:border-gray-700">
				  <td class="px-6 py-4 text-sm text-gray-700 dark:text-gray-300">
					${skill.Skill}
				  </td>
				  <td class="px-6 py-4">
					<span class="px-2 py-1 text-xs rounded-full ${
						skill.isActive
							? "bg-green-100 text-green-700 dark:bg-green-900 dark:text-green-200"
							: "bg-red-100 text-red-700 dark:bg-red-900 dark:text-red-200"
					}">
					  ${skill.isActive ? "Active" : "Inactive"}
					</span>
				  </td>
				</tr>
			  `,
				).join("")}
			</tbody>
		  </table>
		</div>
		`;
	}

	function renderRecommendedSkillsTable(skills) {
		const container = document.getElementById("recommendedSkillsContainer");
		if (!container) return;
		if (!skills || skills.length === 0) {
			container.innerHTML = '';
			return;
		}
		container.innerHTML = `
			<div class="flex justify-between items-center mb-4">
				<h1 class="text-2xl font-semibold text-gray-800 dark:text-gray-200">
					Recommended Skills
				</h1>
				<button id="applyRecommendationsBtn" class="px-4 py-2 bg-green-600 hover:bg-green-700 text-white rounded-lg cursor-pointer transition-colors duration-200 shadow-sm">
					Apply Recommendations
				</button>
			</div>
			<div class="bg-white dark:bg-gray-800 rounded-lg mb-8">
				<table class="min-w-lg">
					<thead>
						<tr class="border-b border-gray-200 dark:border-gray-700">
							<th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">
								Skill
							</th>
							<th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">
								Status
							</th>
						</tr>
					</thead>
					<tbody>
						${skills.map(skill => `
							<tr class="border-b border-gray-100 dark:border-gray-700">
								<td class="px-6 py-4 text-sm text-gray-700 dark:text-gray-300">
									${skill}
								</td>
								<td class="px-6 py-4">
									<span class="px-2 py-1 text-xs rounded-full bg-blue-100 text-blue-700 dark:bg-blue-900 dark:text-blue-200">
										Recommended
									</span>
								</td>
							</tr>
						`).join('')}
					</tbody>
				</table>
			</div>
		`;
		// Add event listener for Apply Recommendations button
		document.getElementById('applyRecommendationsBtn')?.addEventListener('click', async () => {
			const profile = jobProfiles.find((p) => p.id === activeProfileId);
			if (!profile) return;
			try {
				const res = await fetch('/api/applyRecommendations', {
					method: 'POST',
					headers: { 'Content-Type': 'application/json' },
					body: JSON.stringify({
						jobProfileId: profile.id,
						skills: skills
					})
				});
				const data = await res.json();
				if (data.success) {
					// Refresh job profiles and skills table
					const jobProfilesRequest = await fetch("/api/jobProfiles");
					jobProfiles = await jobProfilesRequest.json();
					renderProfiles();
					showProfile(profile.id);
					// Optionally clear recommendations
					recommendedSkills = [];
					renderRecommendedSkillsTable([]);
				} else {
					alert('Failed to apply recommendations: ' + (data.error || 'Unknown error'));
				}
			} catch (e) {
				alert('Failed to apply recommendations: ' + (e?.message || e));
			}
		});
		if (skills && skills.length > 0) {
			container.style.display = '';
		} else {
			container.style.display = 'none';
		}
	}

	function showProfile(profileId) {
		activeProfileId = profileId;
		const profile = jobProfiles.find((p) => p.id === profileId);
		if (profile) {
			renderProfiles(); // Re-render sidebar to update active state
			renderSkillsTable(profile);
		}

		closeBtn?.addEventListener("click", () => closeModal());
		// Handle escape key
		document.addEventListener("keydown", (e) => {
			if (e.key === "Escape" && modal?.classList.contains("!flex")) {
				closeModal();
			}
		});
	}

	async function searchArticles() {
		const modal = document.getElementById("apiModal");
		const searchResults = document.getElementById("searchResults");
		const loadingSpinner = document.getElementById("loadingSpinner");
		const extractionSpinner = document.getElementById("extractionSpinner");
		const summarySpinner = document.getElementById("summarySpinner");
		const extractionResult = document.getElementById("extractionResult");
		const summaryResult = document.getElementById("summaryResult");

		modal?.classList.remove("hidden");
		modal?.classList.add("flex");

		loadingSpinner?.classList.remove("hidden");
		loadingSpinner?.classList.add("flex");

		const profile = jobProfiles.find((p) => p.id === activeProfileId);
		const response = await fetch("/api/search", {
			method: "POST",
			headers: {
				"Content-Type": "application/json",
			},
			body: JSON.stringify({ jobProfile: profile.JobProfile }),
		});

		const { data } = await response.json();

		// Populate search results
		if (searchResults) {
			searchResults.innerHTML = data.results
				.map((result, index) => {
					// Check if this article is in cache with both content and summary
					const cached = articleCache.get(result.url);
					const checked = cached && cached.content && cached.summary;
					return `
					<button 
						data-url="${result.url}"
						class="result-item w-full text-left p-4 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-lg transition-colors duration-200 flex items-center gap-2"
					>
						<input type="checkbox" class="appearance-none h-6 w-6 border border-gray-300 rounded-md checked:bg-green-500 checked:border-transparent focus:outline-none article-checkbox" disabled ${checked ? "checked" : ""} style="pointer-events:none;" />
						<div class="flex-1">
							<h3 class="font-semibold truncate">${result.title}</h3>
							<p class="text-sm text-gray-600 dark:text-gray-400 truncate">${result.url}</p>
						</div>
					</button>
				`;
				})
				.join("");
		}

		loadingSpinner?.classList.remove("flex");
		loadingSpinner?.classList.add("hidden");

		// Add click event listeners to result items
		document.querySelectorAll(".result-item").forEach((item) => {
			item.addEventListener("click", async () => {
				const url = item.getAttribute("data-url");
				if (!url) return;

				// Clear previous results
				if (extractionResult) extractionResult.innerHTML = "";
				if (summaryResult) summaryResult.innerHTML = "";

				// Helper to handle retry
				const showRetry = (errorMsg) => {
					if (extractionResult) {
						extractionResult.innerHTML = `<div class='text-red-600 dark:text-red-400 mb-2'>${errorMsg}</div><button id='retryExtractionBtn' class='px-3 py-1 bg-violet-600 text-white rounded hover:bg-violet-700'>Retry</button>`;
						document
							.getElementById("retryExtractionBtn")
							?.addEventListener("click", async () => {
								// Re-trigger click event
								item.click();
							});
					}
					if (summaryResult) summaryResult.innerHTML = "";
				};

				// Check cache for both content and summary
				if (articleCache.has(url)) {
					const cached = articleCache.get(url);
					if (extractionResult && cached.content) {
						extractionResult.innerHTML = `<div class="whitespace-pre-wrap">${cached.content}</div>`;
					}
					if (summaryResult && cached.summary) {
						summaryResult.innerHTML = cached.summary;
					}
					// Mark checkbox as checked if both content and summary are present
					if (cached.content && cached.summary) {
						const allItems =
							document.querySelectorAll(".result-item");
						allItems.forEach((btn) => {
							if (btn.getAttribute("data-url") === url) {
								const cb =
									btn.querySelector(".article-checkbox");
								if (cb) cb.checked = true;
							}
						});
					}
					// Update active state
					document.querySelectorAll(".result-item").forEach((r) => {
						r.classList.remove(
							"bg-violet-50",
							"dark:bg-violet-900/20",
						);
					});
					item.classList.add("bg-violet-50", "dark:bg-violet-900/20");
					return;
				}

				// Show extraction spinner
				extractionSpinner?.classList.remove("hidden");
				extractionSpinner?.classList.add("flex");

				// Extract content
				const articleContent = await extractContent(url);
				// Hide extraction spinner and show result
				extractionSpinner?.classList.remove("flex");
				extractionSpinner?.classList.add("hidden");
				if (!articleContent.success) {
					showRetry(articleContent.error || "Extraction failed.");
					return;
				}
				if (extractionResult && articleContent.data) {
					extractionResult.innerHTML = `<div class="whitespace-pre-wrap">${articleContent.data}</div>`;
				}

				// Show summary spinner
				summarySpinner?.classList.remove("hidden");
				summarySpinner?.classList.add("flex");

				// Get summary
				let articleSummary = { summary: null };
				try {
					articleSummary = await summarizeContent(
						articleContent.data,
					);
				} catch (e) {
					articleSummary = {
						summary: null,
						error: e?.message || "Summary failed.",
					};
				}

				// Hide summary spinner and show result
				summarySpinner?.classList.remove("flex");
				summarySpinner?.classList.add("hidden");
				if (articleSummary.summary) {
					if (summaryResult)
						summaryResult.innerHTML = articleSummary.summary;
					// Store both content and summary in cache
					articleCache.set(url, {
						content: articleContent.data,
						summary: articleSummary.summary,
					});
					// Mark checkbox as checked
					const allItems = document.querySelectorAll(".result-item");
					allItems.forEach((btn) => {
						if (btn.getAttribute("data-url") === url) {
							const cb = btn.querySelector(".article-checkbox");
							if (cb) cb.checked = true;
						}
					});
				} else {
					if (summaryResult)
						summaryResult.innerHTML = `<div class='text-red-600 dark:text-red-400 mb-2'>${articleSummary.error || "Summary failed."}</div><button id='retrySummaryBtn' class='px-3 py-1 bg-violet-600 text-white rounded hover:bg-violet-700'>Retry</button>`;
					document
						.getElementById("retrySummaryBtn")
						?.addEventListener("click", async () => {
							// Only retry summary, not extraction
							summarySpinner?.classList.remove("hidden");
							summarySpinner?.classList.add("flex");
							let retrySummary = { summary: null };
							try {
								retrySummary = await summarizeContent(
									articleContent.data,
								);
							} catch (e) {
								retrySummary = {
									summary: null,
									error: e?.message || "Summary failed.",
								};
							}
							summarySpinner?.classList.remove("flex");
							summarySpinner?.classList.add("hidden");
							if (retrySummary.summary) {
								summaryResult.innerHTML = retrySummary.summary;
								articleCache.set(url, {
									content: articleContent.data,
									summary: retrySummary.summary,
								});
							} else {
								summaryResult.innerHTML = `<div class='text-red-600 dark:text-red-400 mb-2'>${retrySummary.error || "Summary failed."}</div><button id='retrySummaryBtn' class='px-3 py-1 bg-violet-600 text-white rounded hover:bg-violet-700'>Retry</button>`;
								document
									.getElementById("retrySummaryBtn")
									?.addEventListener("click", () =>
										item.click(),
									);
							}
						});
				}

				// Update active state
				document.querySelectorAll(".result-item").forEach((r) => {
					r.classList.remove("bg-violet-50", "dark:bg-violet-900/20");
				});
				item.classList.add("bg-violet-50", "dark:bg-violet-900/20");

				const getRecommendationsBtn = document.getElementById(
					"getRecommendationsBtn",
				);

				if (getRecommendationsBtn) {
					let hasAtLeastOne = false;
					for (const [url, val] of articleCache.entries()) {
						if (val && val.content && val.summary) {
							hasAtLeastOne = true;
							break;
						}
					}
					if (hasAtLeastOne) {
						getRecommendationsBtn.classList.remove("hidden");
					} else {
						getRecommendationsBtn.classList.add("hidden");
					}
				}
			});
		});

		// Add accordion functionality
		const accordions = [
			{ header: "extractionHeader", content: "extractionContent" },
			{ header: "summaryHeader", content: "summaryContent" },
		];

		accordions.forEach(({ header, content }) => {
			const headerEl = document.getElementById(header);
			const contentEl = document.getElementById(content);
			const arrowEl = headerEl?.querySelector("svg");

			headerEl?.addEventListener("click", () => {
				contentEl?.classList.toggle("hidden");
				arrowEl?.classList.toggle("rotate-180");
			});
		});
	}

	async function summarizeContent(article) {
		const response = await fetch("/api/summary", {
			method: "POST",
			headers: {
				"Content-Type": "application/json",
			},
			body: JSON.stringify({ article }),
		});

		return await response.json();
	}

	async function extractContent(url) {
		const extractionProgress =
			document.getElementById("extractionProgress");
		const extractionResult = document.getElementById("extractionResult");
		let messageSent = false;

		// Check cache first
		if (articleCache.has(url)) {
			const cached = articleCache.get(url);
			if (extractionResult && cached.content) {
				extractionResult.innerHTML = `<div class="whitespace-pre-wrap">${cached.content}</div>`;
			}
			return { success: true, data: cached.content, error: null };
		}

		// Check if extraction is already in progress
		if (inProgressExtractions.has(url)) {
			console.log("Extraction already in progress for:", url);
			return {
				success: false,
				data: null,
				error: "Extraction already in progress",
			};
		}

		// Mark extraction as in progress
		inProgressExtractions.add(url);

		return new Promise(async (resolve) => {
			let accumulatedContent = "";
			try {
				// Show extraction spinner immediately
				const extractionSpinner =
					document.getElementById("extractionSpinner");
				if (extractionSpinner) {
					extractionSpinner.classList.remove("hidden");
					extractionSpinner.classList.add("flex");
				}

				// Get WebSocket connection details
				const response = await fetch("/api/extract", {
					method: "POST",
					headers: {
						"Content-Type": "application/json",
					},
					body: JSON.stringify({ url }),
				});

				const { wsEndpoint, requestId } = await response.json();

				// Create WebSocket connection
				const ws = new WebSocket(wsEndpoint);

				ws.onopen = () => {
					if (!messageSent) {
						messageSent = true;
						ws.send(JSON.stringify({ url, requestId }));
						if (extractionProgress) {
							extractionProgress.innerHTML = "";
							extractionProgress.classList.remove("hidden");
						}
					}
				};

				ws.onmessage = (event) => {
					const message = JSON.parse(event.data);
					switch (message.type) {
						case "progress":
							if (extractionProgress) {
								const progressLine =
									document.createElement("div");
								progressLine.className = "py-1";
								progressLine.textContent = message.data;
								extractionProgress.appendChild(progressLine);
								extractionProgress.scrollTop =
									extractionProgress.scrollHeight;
							}
							break;
						case "extractionComplete":
							if (extractionProgress) {
								extractionProgress.innerHTML = "";
							}
							break;
						case "article":
							if (extractionResult) {
								const articleLine =
									document.createElement("div");
								articleLine.className = "whitespace-pre-wrap";
								articleLine.textContent = message.data;
								extractionResult.appendChild(articleLine);
							}
							accumulatedContent += message.data + "\n";
							break;
						case "complete": {
							const completeText = accumulatedContent.trim();
							// Only store content here, summary will be added after summary fetch
							if (!articleCache.has(url)) {
								articleCache.set(url, {
									content: completeText,
									summary: null,
								});
							} else {
								const prev = articleCache.get(url);
								articleCache.set(url, {
									...prev,
									content: completeText,
								});
							}
							const spinner =
								document.getElementById("extractionSpinner");
							if (spinner) {
								spinner.classList.remove("flex");
								spinner.classList.add("hidden");
							}
							inProgressExtractions.delete(url);
							ws.close();
							resolve({
								success: true,
								data: completeText,
								error: null,
							});
							break;
						}
						case "error": {
							console.error("Extraction error:", message.data);
							if (extractionProgress) {
								extractionProgress.classList.add("hidden");
							}
							const errorSpinner =
								document.getElementById("extractionSpinner");
							if (errorSpinner) {
								errorSpinner.classList.remove("flex");
								errorSpinner.classList.add("hidden");
							}
							inProgressExtractions.delete(url);
							ws.close();
							resolve({
								success: false,
								data: null,
								error: message.data || "Extraction error",
							});
							break;
						}
					}
				};

				ws.onerror = (error) => {
					console.error("WebSocket error:", error);
					if (extractionProgress) {
						extractionProgress.classList.add("hidden");
					}
					const errorSpinner =
						document.getElementById("extractionSpinner");
					if (errorSpinner) {
						errorSpinner.classList.remove("flex");
						errorSpinner.classList.add("hidden");
					}
					inProgressExtractions.delete(url);
					ws.close();
					resolve({
						success: false,
						data: null,
						error: "WebSocket error",
					});
				};
			} catch (error) {
				console.error("Extraction error:", error);
				const errorSpinner =
					document.getElementById("extractionSpinner");
				if (errorSpinner) {
					errorSpinner.classList.remove("flex");
					errorSpinner.classList.add("hidden");
				}
				inProgressExtractions.delete(url);
				resolve({
					success: false,
					data: null,
					error: error?.message || "Extraction error",
				});
			}
		});
	}

	(async function () {
		const jobProfilesRequest = await fetch("/api/jobProfiles");
		jobProfiles = await jobProfilesRequest.json();
		renderProfiles();
		showProfile(jobProfiles[0].id);
	})();

	// After the IIFE that loads jobProfiles and renders the UI
	(function attachGetRecommendationsHandler() {
		document.addEventListener('DOMContentLoaded', () => {
			const getRecommendationsBtn = document.getElementById("getRecommendationsBtn");
			if (getRecommendationsBtn) {
				getRecommendationsBtn.addEventListener("click", async () => {
					
					// 2. Prepare payload
					const profile = jobProfiles.find((p) => p.id === activeProfileId);
					const articles = Array.from(articleCache.entries())
						.filter(([url, val]) => val && val.content && val.summary)
						.map(([url, val]) => val.content);
					const skills = profile.JobProfileSkills.map(s => s.Skill);
					const payload = {
						jobProfile: profile.JobProfile,
						skills,
						articles
					};
					closeModal();
					// 3. Make API call
					try {
						const res = await fetch("/api/getRecommendations", {
							method: "POST",
							headers: { "Content-Type": "application/json" },
							body: JSON.stringify(payload)
						});
						const data = await res.json();
						// 4. Log output
						console.log("Recommendations API output:", data);
						if (data && Array.isArray(data.recommendedSkills)) {
							recommendedSkills = data.recommendedSkills;
							renderRecommendedSkillsTable(recommendedSkills);
						}
					} catch (e) {
						console.error("Recommendations API error:", e);
					}
					// 5. Clear cache
					articleCache.clear();
				});
			}
		});
	})();
</script>
